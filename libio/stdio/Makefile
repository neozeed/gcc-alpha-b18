# This file was generated automatically by configure.  Do not edit.
VPATH = .
links = 
host_alias = alpha-cygwin32
host_cpu = alpha
host_vendor = unknown
host_os = cygwin32
host_canonical = alpha-unknown-cygwin32
target_alias = alpha-cygwin32
target_cpu = alpha
target_vendor = unknown
target_os = cygwin32
target_canonical = alpha-unknown-cygwin32
build_alias = alpha-cygwin32
build_cpu = alpha
build_vendor = unknown
build_os = cygwin32
build_canonical = alpha-unknown-cygwin32
package_makefile_frag = ../Make.pack
srcdir = .

#### package, host, target, and site dependent Makefile fragments come in here.
# Start of package fragment generated by ./config.shared.

MULTISRCTOP =
MULTIBUILDTOP =
MULTIDIRS =
MULTISUBDIR =
MULTIDO = true
MULTICLEAN = true

# TOPDIR=$${rootme}$(MULTIBUILDTOP)../../../ invsubdir= subdir=
srcdir = .
SUBDIRS = 
prefix = /usr/local
exec_prefix = $(prefix)
bindir = $(exec_prefix)/bin
libdir = $(exec_prefix)/lib
datadir = $(prefix)/lib
mandir = $(prefix)/man
man1dir = $(mandir)/man1
man2dir = $(mandir)/man2
man3dir = $(mandir)/man3
man4dir = $(mandir)/man4
man5dir = $(mandir)/man5
man6dir = $(mandir)/man6
man7dir = $(mandir)/man7
man8dir = $(mandir)/man8
man9dir = $(mandir)/man9
infodir = $(prefix)/info
includedir = $(prefix)/include
gxx_includedir = $(includedir)/g++
docdir = $(datadir)/doc

SHELL = sh

INSTALL = $${rootme}../../../install.sh -c
INSTALL_PROGRAM = $(INSTALL)
INSTALL_DATA = $(INSTALL)

AR = `if [ -f $${rootme}$(MULTIBUILDTOP)../../../binutils/ar ] ; \
	then echo $${rootme}$(MULTIBUILDTOP)../../../binutils/ar ; \
	else echo ar ; fi`
AR_FLAGS = rc
RANLIB = `if [ -f $${rootme}$(MULTIBUILDTOP)../../../binutils/ranlib ] ; \
	then echo $${rootme}$(MULTIBUILDTOP)../../../binutils/ranlib ; \
	else echo ranlib ; fi`
NM = `if [ -f $${rootme}$(MULTIBUILDTOP)../../../binutils/nm.new ] ; \
	then echo $${rootme}$(MULTIBUILDTOP)../../../binutils/nm.new ; \
	else echo nm ; fi`
NLMCONV = `if [ -f $${rootme}$(MULTIBUILDTOP)../../../binutils/nlmconv ] ; \
	then echo $${rootme}$(MULTIBUILDTOP)../../../binutils/nlmconv ; \
	else echo nlmconv ; fi`
LD = `if [ -f $${rootme}$(MULTIBUILDTOP)../../../ld/ld.new ] ; \
	then echo $${rootme}$(MULTIBUILDTOP)../../../ld/ld.new ; \
	else echo ld ; fi`

MAKEINFO = `if [ -f $${rootme}$(MULTIBUILDTOP)../../../texinfo/C/makeinfo ] ; \
	then echo $${rootme}$(MULTIBUILDTOP)../../../texinfo/C/makeinfo ; \
	else echo makeinfo ; fi`
TEXIDIR = ../../../texinfo
TEXI2DVI = TEXINPUTS=${TEXIDIR}:$$TEXINPUTS texi2dvi

CC = gcc -D__STDC__
CXX = gcc

WRAP_C_INCLUDES =
CFLAGS = -g
CXXFLAGS = -g -O
LIBCFLAGS = $(CFLAGS)
LIBCXXFLAGS = $(CXXFLAGS) -fno-implicit-templates
PICFLAG =
PICDIR = stamp-picdir
all: $(PICDIR) nothing multi-all
.PHONY: all

.PHONY: multi-all
multi-all:
	@$(MULTIDO) $(FLAGS_TO_PASS) multi-do DO=all


NOSTDINC = -nostdinc++
XCFLAGS = $(LIBCFLAGS)
XCXXFLAGS = $(LIBCXXFLAGS)
.SUFFIXES: .o .C .cc .c
COMPILE.c = $(CC) -c $(XCFLAGS) $(CINCLUDES)
.c.o:
	test -z "$(PICFLAG)" ||\
	  $(COMPILE.c) $(PICFLAG) $< -o pic/$@
	$(COMPILE.c) $<
COMPILE.cc = $(CXX) -c $(XCXXFLAGS) $(CXXINCLUDES)
.C.o:
	test -z "$(PICFLAG)" ||\
	  $(COMPILE.cc) $(PICFLAG) $< -o pic/$@
	$(COMPILE.cc) $<
.cc.o:
	test -z "$(PICFLAG)" || \
	  $(COMPILE.cc) $(PICFLAG) $< -o pic/$@
	$(COMPILE.cc) $<


stamp-picdir:
	if [ -n "$(PICFLAG)" ] && [ ! -d pic ]; then \
	  mkdir pic; \
	else true; fi
	touch stamp-picdir

.PHONY: install
install:
.PHONY: check
check: $(PICDIR) nothing 
.PHONY: info dvi install-info clean-info
info:
dvi:
install-info:
.PHONY: do-clean-info clean-info do-clean-dvi clean-dvi
do-clean-info:
do-clean-dvi:
clean-info: do-clean-info
clean-dvi: do-clean-dvi

.PHONY: boltcc
boltcc:
	rootme=`pwd`/ ; export rootme ; $(MAKE) $(FLAGS_TO_PASS)


# clean rules
.PHONY: mostlyclean clean distclean maintainer-clean realclean
mostlyclean: clean-dvi
	rm -rf *.o pic stamp-picdir core stdio.list 
	@$(MULTICLEAN) multi-clean DO=mostlyclean
clean: clean-dvi
	rm -rf *.o pic stamp-picdir core stdio.list   
	@$(MULTICLEAN) multi-clean DO=clean
distclean: clean
	@$(MULTICLEAN) multi-clean DO=distclean
	rm -rf config.status Makefile *~ Make.pack multilib.out 
maintainer-clean realclean: clean clean-info
	@$(MULTICLEAN) multi-clean DO=maintainer-clean
	rm -rf config.status Makefile *~ Make.pack multilib.out  depend *.info*

.PHONY: force
force:

# with the gnu make, this is done automatically.

Makefile: $(srcdir)/Makefile.in $(host_makefile_frag) $(target_makefile_frag)
	$(SHELL) ./config.status

.NOEXPORT:
MAKEOVERRIDES=
DEPEND_SOURCES = ${srcdir}/*.cc ${srcdir}/*.c
depend.new:
# The sed script below attempts to make the depend output portable.
# It cleans up the depenency information generated by cpp.
# It replaces instances of $(srcdir)/ by the string '$(srcdir)/'.
# It removes remaining absolute files names (such as /usr/include/stdio.h).
# It removes lines containing only "\\".
# It inserts '$(MULTISRCTOP)' in '$(srcdir)/..'.
# In order to support SunOS VPATH, $(srcdir)/[a-z]*.{c,cc} is replaced with
# [a-z]*.{c,cc} (the directory part is removed).
# The awk script removes a continuation marker that is followed by
# a blank line, since that may confuse make.
	echo "# AUTOMATICALLY GENERATED BY 'make depend' - DO NOT EDIT" \
	  >depend.new
	$(CXX) -M $(CXXINCLUDES) $(DEPEND_SOURCES) \
	| sed -e 's|$(srcdir)/|$$(srcdir)/|g' \
	      -e 's| /[^ ]*||g' \
	      -e '/^[ 	]*\\$$/d' -e 's/^[ 	]*$$//' \
	| sed -e 's|$$(srcdir)/[.][.]|$$(srcdir)/$$(MULTISRCTOP)..|g' \
	      -e 's|$$(srcdir)/\([^/]*[.]c\)|\1|' \
	| awk 'BEGIN   { prev = "" } \
	      /^( )*$$/ { if (prev ~ /\\$$/) \
	                    { prev = substr(prev,1,length(prev)-1); next } } \
	                { print prev; prev = $$0 } \
	      END { if (prev !~ /^( )*$$/) print prev }' \
	>> depend.new
$(srcdir)/depend:  depend.new
	mv depend.new $(srcdir)/depend
# End of package fragment generated by ./config.shared.
##

# These are compiled from the corresponding ../ioFOO.c files.
STDIO_RENAMED_OBJECTS = fclose.o fflush.o fgetpos.o fgets.o fopen.o fprintf.o fputs.o fread.o fscanf.o fsetpos.o ftell.o fwrite.o getdelim.o gets.o perror.o printf.o puts.o scanf.o setbuffer.o setvbuf.o sprintf.o sscanf.o ungetc.o vsprintf.o vsscanf.o
# These are the files that a libc would want.
STDIO_OBJECTS = $(STDIO_RENAMED_OBJECTS) \
  clearerr.o fdopen.o feof.o ferror.o fgetc.o fileno.o \
  fputc.o freopen.o fseek.o getc.o getchar.o getline.o getw.o \
  popen.o putc.o putchar.o putw.o rewind.o \
  setbuf.o setfileno.o setlinebuf.o snprintf.o \
  vfprintf.o vfscanf.o vprintf.o vscanf.o vsnprintf.o

CC_FOR_STDIO=$(CC)
CINCLUDES = -I. -I$(srcdir) -I.. -I$(srcdir)/.. -D__USE_GNU

nothing:

stdio.list: stamp-picdir $(STDIO_OBJECTS)
	@echo "$(STDIO_OBJECTS)" >stdio.list

fclose.o: $(srcdir)/../iofclose.c
	if [ -n "$(PICFLAG)" ]; then \
	  $(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) $(PICFLAG) -c \
	  $(srcdir)/../iofclose.c -D_IO_fclose=fclose -o pic/fclose.o; \
	fi
	$(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) -c \
	  $(srcdir)/../iofclose.c -D_IO_fclose=fclose -o fclose.o
fflush.o: $(srcdir)/../iofflush.c
	if [ -n "$(PICFLAG)" ]; then \
	  $(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) $(PICFLAG) -c \
	  $(srcdir)/../iofflush.c -D_IO_fflush=fflush -o pic/fflush.o; \
	fi
	$(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) -c \
	  $(srcdir)/../iofflush.c -D_IO_fflush=fflush -o fflush.o
fgetpos.o: $(srcdir)/../iofgetpos.c
	if [ -n "$(PICFLAG)" ]; then \
	  $(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) $(PICFLAG) -c \
	  $(srcdir)/../iofgetpos.c -D_IO_fgetpos=fgetpos -o pic/fgetpos.o; \
	fi
	$(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) -c \
	  $(srcdir)/../iofgetpos.c -D_IO_fgetpos=fgetpos -o fgetpos.o
fgets.o: $(srcdir)/../iofgets.c
	if [ -n "$(PICFLAG)" ]; then \
	  $(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) $(PICFLAG) -c \
	  $(srcdir)/../iofgets.c -D_IO_fgets=fgets -o pic/fgets.o; \
	fi
	$(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) -c \
	  $(srcdir)/../iofgets.c -D_IO_fgets=fgets -o fgets.o
fopen.o: $(srcdir)/../iofopen.c
	if [ -n "$(PICFLAG)" ]; then \
	  $(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) $(PICFLAG) -c \
	  $(srcdir)/../iofopen.c -D_IO_fopen=fopen -o pic/fopen.o; \
	fi
	$(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) -c \
	  $(srcdir)/../iofopen.c -D_IO_fopen=fopen -o fopen.o
fprintf.o: $(srcdir)/../iofprintf.c
	if [ -n "$(PICFLAG)" ]; then \
	  $(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) $(PICFLAG) -c \
	  $(srcdir)/../iofprintf.c -D_IO_fprintf=fprintf -o pic/fprintf.o; \
	fi
	$(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) -c \
	  $(srcdir)/../iofprintf.c -D_IO_fprintf=fprintf -o fprintf.o
fputs.o: $(srcdir)/../iofputs.c
	if [ -n "$(PICFLAG)" ]; then \
	  $(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) $(PICFLAG) -c \
	  $(srcdir)/../iofputs.c -D_IO_fputs=fputs -o pic/fputs.o; \
	fi
	$(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) -c \
	  $(srcdir)/../iofputs.c -D_IO_fputs=fputs -o fputs.o
fread.o: $(srcdir)/../iofread.c
	if [ -n "$(PICFLAG)" ]; then \
	  $(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) $(PICFLAG) -c \
	  $(srcdir)/../iofread.c -D_IO_fread=fread -o pic/fread.o; \
	fi
	$(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) -c \
	  $(srcdir)/../iofread.c -D_IO_fread=fread -o fread.o
fscanf.o: $(srcdir)/../iofscanf.c
	if [ -n "$(PICFLAG)" ]; then \
	  $(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) $(PICFLAG) -c \
	  $(srcdir)/../iofscanf.c -D_IO_fscanf=fscanf -o pic/fscanf.o; \
	fi
	$(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) -c \
	  $(srcdir)/../iofscanf.c -D_IO_fscanf=fscanf -o fscanf.o
fsetpos.o: $(srcdir)/../iofsetpos.c
	if [ -n "$(PICFLAG)" ]; then \
	  $(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) $(PICFLAG) -c \
	  $(srcdir)/../iofsetpos.c -D_IO_fsetpos=fsetpos -o pic/fsetpos.o; \
	fi
	$(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) -c \
	  $(srcdir)/../iofsetpos.c -D_IO_fsetpos=fsetpos -o fsetpos.o
ftell.o: $(srcdir)/../ioftell.c
	if [ -n "$(PICFLAG)" ]; then \
	  $(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) $(PICFLAG) -c \
	  $(srcdir)/../ioftell.c -D_IO_ftell=ftell -o pic/ftell.o; \
	fi
	$(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) -c \
	  $(srcdir)/../ioftell.c -D_IO_ftell=ftell -o ftell.o
fwrite.o: $(srcdir)/../iofwrite.c
	if [ -n "$(PICFLAG)" ]; then \
	  $(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) $(PICFLAG) -c \
	  $(srcdir)/../iofwrite.c -D_IO_fwrite=fwrite -o pic/fwrite.o; \
	fi
	$(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) -c \
	  $(srcdir)/../iofwrite.c -D_IO_fwrite=fwrite -o fwrite.o
getdelim.o: $(srcdir)/../iogetdelim.c
	if [ -n "$(PICFLAG)" ]; then \
	  $(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) $(PICFLAG) -c \
	  $(srcdir)/../iogetdelim.c -D_IO_getdelim=getdelim -o pic/getdelim.o; \
	fi
	$(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) -c \
	  $(srcdir)/../iogetdelim.c -D_IO_getdelim=getdelim -o getdelim.o
gets.o: $(srcdir)/../iogets.c
	if [ -n "$(PICFLAG)" ]; then \
	  $(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) $(PICFLAG) -c \
	  $(srcdir)/../iogets.c -D_IO_gets=gets -o pic/gets.o; \
	fi
	$(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) -c \
	  $(srcdir)/../iogets.c -D_IO_gets=gets -o gets.o
perror.o: $(srcdir)/../ioperror.c
	if [ -n "$(PICFLAG)" ]; then \
	  $(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) $(PICFLAG) -c \
	  $(srcdir)/../ioperror.c -D_IO_perror=perror -o pic/perror.o; \
	fi
	$(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) -c \
	  $(srcdir)/../ioperror.c -D_IO_perror=perror -o perror.o
printf.o: $(srcdir)/../ioprintf.c
	if [ -n "$(PICFLAG)" ]; then \
	  $(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) $(PICFLAG) -c \
	  $(srcdir)/../ioprintf.c -D_IO_printf=printf -o pic/printf.o; \
	fi
	$(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) -c \
	  $(srcdir)/../ioprintf.c -D_IO_printf=printf -o printf.o
puts.o: $(srcdir)/../ioputs.c
	if [ -n "$(PICFLAG)" ]; then \
	  $(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) $(PICFLAG) -c \
	  $(srcdir)/../ioputs.c -D_IO_puts=puts -o pic/puts.o; \
	fi
	$(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) -c \
	  $(srcdir)/../ioputs.c -D_IO_puts=puts -o puts.o
scanf.o: $(srcdir)/../ioscanf.c
	if [ -n "$(PICFLAG)" ]; then \
	  $(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) $(PICFLAG) -c \
	  $(srcdir)/../ioscanf.c -D_IO_scanf=scanf -o pic/scanf.o; \
	fi
	$(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) -c \
	  $(srcdir)/../ioscanf.c -D_IO_scanf=scanf -o scanf.o
setbuffer.o: $(srcdir)/../iosetbuffer.c
	if [ -n "$(PICFLAG)" ]; then \
	  $(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) $(PICFLAG) -c \
	  $(srcdir)/../iosetbuffer.c -D_IO_setbuffer=setbuffer -o pic/setbuffer.o; \
	fi
	$(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) -c \
	  $(srcdir)/../iosetbuffer.c -D_IO_setbuffer=setbuffer -o setbuffer.o
setvbuf.o: $(srcdir)/../iosetvbuf.c
	if [ -n "$(PICFLAG)" ]; then \
	  $(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) $(PICFLAG) -c \
	  $(srcdir)/../iosetvbuf.c -D_IO_setvbuf=setvbuf -o pic/setvbuf.o; \
	fi
	$(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) -c \
	  $(srcdir)/../iosetvbuf.c -D_IO_setvbuf=setvbuf -o setvbuf.o
sprintf.o: $(srcdir)/../iosprintf.c
	if [ -n "$(PICFLAG)" ]; then \
	  $(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) $(PICFLAG) -c \
	  $(srcdir)/../iosprintf.c -D_IO_sprintf=sprintf -o pic/sprintf.o; \
	fi
	$(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) -c \
	  $(srcdir)/../iosprintf.c -D_IO_sprintf=sprintf -o sprintf.o
sscanf.o: $(srcdir)/../iosscanf.c
	if [ -n "$(PICFLAG)" ]; then \
	  $(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) $(PICFLAG) -c \
	  $(srcdir)/../iosscanf.c -D_IO_sscanf=sscanf -o pic/sscanf.o; \
	fi
	$(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) -c \
	  $(srcdir)/../iosscanf.c -D_IO_sscanf=sscanf -o sscanf.o
ungetc.o: $(srcdir)/../ioungetc.c
	if [ -n "$(PICFLAG)" ]; then \
	  $(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) $(PICFLAG) -c \
	  $(srcdir)/../ioungetc.c -D_IO_ungetc=ungetc -o pic/ungetc.o; \
	fi
	$(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) -c \
	  $(srcdir)/../ioungetc.c -D_IO_ungetc=ungetc -o ungetc.o
vsprintf.o: $(srcdir)/../iovsprintf.c
	if [ -n "$(PICFLAG)" ]; then \
	  $(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) $(PICFLAG) -c \
	  $(srcdir)/../iovsprintf.c -D_IO_vsprintf=vsprintf -o pic/vsprintf.o; \
	fi
	$(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) -c \
	  $(srcdir)/../iovsprintf.c -D_IO_vsprintf=vsprintf -o vsprintf.o
vsscanf.o: $(srcdir)/../iovsscanf.c
	if [ -n "$(PICFLAG)" ]; then \
	  $(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) $(PICFLAG) -c \
	  $(srcdir)/../iovsscanf.c -D_IO_vsscanf=vsscanf -o pic/vsscanf.o; \
	fi
	$(CC_FOR_STDIO) $(CFLAGS) $(CINCLUDES) -c \
	  $(srcdir)/../iovsscanf.c -D_IO_vsscanf=vsscanf -o vsscanf.o
