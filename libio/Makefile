# This file was generated automatically by configure.  Do not edit.
VPATH = .
links = 
host_alias = alpha-cygwin32
host_cpu = alpha
host_vendor = unknown
host_os = cygwin32
host_canonical = alpha-unknown-cygwin32
target_alias = alpha-cygwin32
target_cpu = alpha
target_vendor = unknown
target_os = cygwin32
target_canonical = alpha-unknown-cygwin32
build_alias = alpha-cygwin32
build_cpu = alpha
build_vendor = unknown
build_os = cygwin32
build_canonical = alpha-unknown-cygwin32
package_makefile_frag = Make.pack
target_makefile_frag = target-mkfrag
# Copyright (C) 1993, 1995 Free Software Foundation
# 
# This file is part of the GNU IO Library.  This library is free
# software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2, or (at your option)
# any later version.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this library; see the file COPYING.  If not, write to the Free
# Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

srcdir = .

VERSION = 2.8.0
# The config file (overriden by Linux).
_G_CONFIG_H=_G_config.h
tooldir = $(exec_prefix)/alpha-cygwin32
INSTALLDIR = $(libdir)

IO_OBJECTS = filedoalloc.o floatconv.o genops.o fileops.o \
  iovfprintf.o \
  iovfscanf.o ioignore.o iopadn.o \
  iofgetpos.o iofread.o iofscanf.o \
  iofsetpos.o iogetdelim.o iogetline.o \
  ioprintf.o ioseekoff.o ioseekpos.o \
  outfloat.o strops.o iofclose.o iopopen.o ioungetc.o

# These emulate stdio functionality, but with a different name (_IO_ungetc
# instead of ungetc), and using _IO_FILE instead of FILE.
# They are not needed for C++ iostream, nor stdio, though some stdio
# files are build using the same source files (see stdio/configure.in).
# They are needed for iostdio.h.  They are needed under Linux to avoid
# version incompatibility problems with the C library.
# iofclose.o is not here, because it is needed for stdio (by pclose).
STDIO_WRAP_OBJECTS =  iofdopen.o iofflush.o iofgets.o iofopen.o iofprintf.o iofputs.o iofwrite.o \
  iogets.o ioperror.o ioputs.o ioscanf.o iosetbuffer.o iosetvbuf.o \
  iosprintf.o iosscanf.o ioftell.o iovsprintf.o iovsscanf.o

IOSTREAM_OBJECTS = builtinbuf.o filebuf.o fstream.o \
  indstream.o ioassign.o ioextend.o iomanip.o iostream.o \
  isgetline.o isgetsb.o isscan.o \
  osform.o procbuf.o sbform.o sbgetline.o sbscan.o \
  stdiostream.o stdstrbufs.o stdstreams.o stream.o streambuf.o strstream.o \
  PlotFile.o SFile.o parsestream.o pfstream.o editbuf.o

# These files define _IO_read etc, which are just wrappers for read(2) etc.
# They need to be changed to use name-space-clean (e.g. __read) versions
# for each specific libc.
OSPRIM_OBJECTS = ioprims.o iostrerror.o cleanup.o

LIBIOSTREAM_OBJECTS = $(IO_OBJECTS) $(IOSTREAM_OBJECTS) $(OSPRIM_OBJECTS)
LIBIO_OBJECTS = $(IO_OBJECTS) $(STDIO_WRAP_OBJECTS) $(OSPRIM_OBJECTS) stdfiles.o

LIBIOSTREAM_DEP = $(LIBIOSTREAM_OBJECTS)
LIBIOSTREAM_USE = $(LIBIOSTREAM_OBJECTS)

USER_INCLUDES = *.h

#### package, host, target, and site dependent Makefile fragments come in here.
# Start of package fragment generated by ./config.shared.

MULTISRCTOP = ../
MULTIBUILDTOP = 
MULTIDIRS = 
MULTISUBDIR = 
MULTIDO = $(MAKE)
MULTICLEAN = $(MAKE)

# TOPDIR=$${rootme}$(MULTIBUILDTOP)../../ invsubdir= subdir=
srcdir = .
SUBDIRS = tests dbz stdio
prefix = /usr/local
exec_prefix = $(prefix)
bindir = $(exec_prefix)/bin
libdir = $(exec_prefix)/lib
datadir = $(prefix)/lib
mandir = $(prefix)/man
man1dir = $(mandir)/man1
man2dir = $(mandir)/man2
man3dir = $(mandir)/man3
man4dir = $(mandir)/man4
man5dir = $(mandir)/man5
man6dir = $(mandir)/man6
man7dir = $(mandir)/man7
man8dir = $(mandir)/man8
man9dir = $(mandir)/man9
infodir = $(prefix)/info
includedir = $(prefix)/include
gxx_includedir = $(includedir)/g++
docdir = $(datadir)/doc

SHELL = sh

INSTALL = $${rootme}../../install.sh -c
INSTALL_PROGRAM = $(INSTALL)
INSTALL_DATA = $(INSTALL)

AR = `if [ -f $${rootme}$(MULTIBUILDTOP)../../binutils/ar ] ; \
	then echo $${rootme}$(MULTIBUILDTOP)../../binutils/ar ; \
	else echo ar ; fi`
AR_FLAGS = rc
RANLIB = `if [ -f $${rootme}$(MULTIBUILDTOP)../../binutils/ranlib ] ; \
	then echo $${rootme}$(MULTIBUILDTOP)../../binutils/ranlib ; \
	else echo ranlib ; fi`
NM = `if [ -f $${rootme}$(MULTIBUILDTOP)../../binutils/nm.new ] ; \
	then echo $${rootme}$(MULTIBUILDTOP)../../binutils/nm.new ; \
	else echo nm ; fi`
NLMCONV = `if [ -f $${rootme}$(MULTIBUILDTOP)../../binutils/nlmconv ] ; \
	then echo $${rootme}$(MULTIBUILDTOP)../../binutils/nlmconv ; \
	else echo nlmconv ; fi`
LD = `if [ -f $${rootme}$(MULTIBUILDTOP)../../ld/ld.new ] ; \
	then echo $${rootme}$(MULTIBUILDTOP)../../ld/ld.new ; \
	else echo ld ; fi`

MAKEINFO = `if [ -f $${rootme}$(MULTIBUILDTOP)../../texinfo/C/makeinfo ] ; \
	then echo $${rootme}$(MULTIBUILDTOP)../../texinfo/C/makeinfo ; \
	else echo makeinfo ; fi`
TEXIDIR = ../../texinfo
TEXI2DVI = TEXINPUTS=${TEXIDIR}:$$TEXINPUTS texi2dvi

CC = gcc -D__STDC__
CXX = gcc

WRAP_C_INCLUDES =
CFLAGS = -g
CXXFLAGS = -g -O
LIBCFLAGS = $(CFLAGS)
LIBCXXFLAGS = $(CXXFLAGS) -fno-implicit-templates
PICFLAG =
PICDIR = stamp-picdir
all: $(PICDIR) $(_G_CONFIG_H) libio.a iostream.list multi-all
	@rootme=`pwd`/; export rootme; \
	$(MAKE) "DODIRS=$(SUBDIRS)" DO=all $(FLAGS_TO_PASS) subdir_do
.PHONY: all

.PHONY: multi-all
multi-all:
	@$(MULTIDO) $(FLAGS_TO_PASS) multi-do DO=all


.PHONY: subdir_do
subdir_do: force
	@rootme=`pwd`/; export rootme; \
	for i in $(DODIRS); do \
		if [ -f  ./$$i/Makefile ] ; then \
			echo "cd $$i; make $(DO) ..." ; \
			(cd $$i ; $(MAKE) $(FLAGS_TO_PASS) $(DO)) || exit 1 ; \
		else true ; fi ; \
	done

# List of variables to pass to sub-makes.  This should not be needed
# by GNU make or Sun make (both of which pass command-line variable
# overrides thouh $(MAKE)) but may be needed by older versions.

FLAGS_TO_PASS= \
	"INSTALL=$(INSTALL)" \
	"INSTALL_DATA=$(INSTALL_DATA)" \
	"INSTALL_PROGRAM=$(INSTALL_PROGRAM)" \
	"prefix=$(prefix)" \
	"exec_prefix=$(exec_prefix)" \
	"tooldir=$(tooldir)" \
	"AR=$(AR)" \
	"AR_FLAGS=$(AR_FLAGS)" \
	"CC=$(CC)" \
	"CXX=$(CXX)" \
	"CFLAGS=$(CFLAGS)" \
	"CXXFLAGS=$(CXXFLAGS)" \
	"NM=$(NM)" \
	"RANLIB=$(RANLIB)" \
	"LIBCFLAGS=$(LIBCFLAGS)" \
	"LIBCXXFLAGS=$(LIBCXXFLAGS)" \
	"LOADLIBES=$(LOADLIBES)" \
	"LDFLAGS=$(LDFLAGS)" \
	"MAKEINFO=$(MAKEINFO)" \
	"SHLIB=$(SHLIB)" \
	"SHCURSES=$(SHCURSES)" \
	"PICFLAG=$(PICFLAG)"
NOSTDINC = -nostdinc++
CXXINCLUDES = -I. -I$(srcdir) $(NOSTDINC) -I$(srcdir)/../newlib/libc/include
CINCLUDES = -I. -I$(srcdir)
XCFLAGS = $(LIBCFLAGS)
XCXXFLAGS = $(LIBCXXFLAGS)
.SUFFIXES: .o .C .cc .c
COMPILE.c = $(CC) -c $(XCFLAGS) $(CINCLUDES)
.c.o:
	test -z "$(PICFLAG)" ||\
	  $(COMPILE.c) $(PICFLAG) $< -o pic/$@
	$(COMPILE.c) $<
COMPILE.cc = $(CXX) -c $(XCXXFLAGS) $(CXXINCLUDES)
.C.o:
	test -z "$(PICFLAG)" ||\
	  $(COMPILE.cc) $(PICFLAG) $< -o pic/$@
	$(COMPILE.cc) $<
.cc.o:
	test -z "$(PICFLAG)" || \
	  $(COMPILE.cc) $(PICFLAG) $< -o pic/$@
	$(COMPILE.cc) $<


stamp-picdir:
	if [ -n "$(PICFLAG)" ] && [ ! -d pic ]; then \
	  mkdir pic; \
	else true; fi
	touch stamp-picdir

.PHONY: install
install:
.PHONY: check
check: $(PICDIR) $(_G_CONFIG_H) libio.a iostream.list 
	rootme=`pwd`/; export rootme; \
	SAVE_LLPATH="$${SAVE_LLPATH-$$LD_LIBRARY_PATH}"; export SAVE_LLPATH; \
	LD_LIBRARY_PATH="$${rootme}${TOLIBGXX}../libstdc++:$${rootme}${TOLIBGXX}../libg++:$$SAVE_LLPATH"; \
	export LD_LIBRARY_PATH; \
	$(MAKE) "DODIRS=$(SUBDIRS)" DO=check $(FLAGS_TO_PASS) subdir_do
.PHONY: info dvi install-info clean-info
info: iostream.info
dvi: iostream.dvi
iostream.info: $(srcdir)/iostream.texi
	$(MAKEINFO) -I$(srcdir) -I$(TEXIDIR) $(srcdir)/iostream.texi -o iostream.info
iostream.dvi: $(srcdir)/iostream.texi
	$(TEXI2DVI) $(srcdir)/iostream.texi
iostream.ps: iostream.dvi
	dvips iostream -o
install-info:
	-parent=`echo $(infodir)|sed -e 's@/[^/]*$$@@'`; \
	if [ -d $$parent ] ; then true ; else mkdir $$parent ; fi
	-if [ -d $(infodir) ] ; then true ; else mkdir $(infodir) ; fi
	for i in *.info* ; do \
	  $(INSTALL_DATA) $$i $(infodir)/$$i ; \
	done
.PHONY: do-clean-info clean-info do-clean-dvi clean-dvi
do-clean-info:
	rm -f *.info*
do-clean-dvi:
	rm -f *.dvi *.aux *.cp *.cps *.fn* *.ky *.log *.pg *.toc *.tp *.vr
clean-info: do-clean-info
clean-dvi: do-clean-dvi

.PHONY: boltcc
boltcc:
	rootme=`pwd`/ ; export rootme ; $(MAKE) $(FLAGS_TO_PASS)


# clean rules
.PHONY: mostlyclean clean distclean maintainer-clean realclean
.PHONY: do-clean subdir_distclean subdir_maintainer_clean
mostlyclean: do-clean-dvi
	rm -rf *.o pic stamp-picdir core iostream.list 
	@$(MAKE) $(FLAGS_TO_PASS) "DODIRS=$(SUBDIRS)" DO=mostlyclean subdir_do
	@$(MULTICLEAN) multi-clean DO=mostlyclean
do-clean: do-clean-dvi
	rm -rf *.o pic stamp-picdir core iostream.list  _G_config.h *.a
clean: do-clean
	@$(MAKE) $(FLAGS_TO_PASS) "DODIRS=$(SUBDIRS)" DO=clean subdir_do
	@$(MULTICLEAN) multi-clean DO=clean
subdir_distclean:
	@$(MAKE) $(FLAGS_TO_PASS) "DODIRS=$(SUBDIRS)" DO=distclean subdir_do
distclean: do-clean subdir_distclean
	@$(MULTICLEAN) multi-clean DO=distclean
	rm -rf config.status Makefile *~ Make.pack target-mkfrag multilib.out
subdir_maintainer_clean:
	@$(MAKE) $(FLAGS_TO_PASS) "DODIRS=$(SUBDIRS)" DO=maintainer-clean subdir_do
maintainer-clean realclean: do-clean subdir_maintainer_clean do-clean-info
	@$(MULTICLEAN) multi-clean DO=maintainer-clean
	rm -rf config.status Makefile *~ Make.pack target-mkfrag multilib.out depend *.info*

.PHONY: force
force:

# with the gnu make, this is done automatically.

Makefile: $(srcdir)/Makefile.in $(host_makefile_frag) $(target_makefile_frag)
	$(SHELL) ./config.status

.NOEXPORT:
MAKEOVERRIDES=
DEPEND_SOURCES = ${srcdir}/*.cc ${srcdir}/*.c
depend.new:
# The sed script below attempts to make the depend output portable.
# It cleans up the depenency information generated by cpp.
# It replaces instances of $(srcdir)/ by the string '$(srcdir)/'.
# It removes remaining absolute files names (such as /usr/include/stdio.h).
# It removes lines containing only "\\".
# It inserts '$(MULTISRCTOP)' in '$(srcdir)/..'.
# In order to support SunOS VPATH, $(srcdir)/[a-z]*.{c,cc} is replaced with
# [a-z]*.{c,cc} (the directory part is removed).
# The awk script removes a continuation marker that is followed by
# a blank line, since that may confuse make.
	echo "# AUTOMATICALLY GENERATED BY 'make depend' - DO NOT EDIT" \
	  >depend.new
	$(CXX) -M $(CXXINCLUDES) $(DEPEND_SOURCES) \
	| sed -e 's|$(srcdir)/|$$(srcdir)/|g' \
	      -e 's| /[^ ]*||g' \
	      -e '/^[ 	]*\\$$/d' -e 's/^[ 	]*$$//' \
	| sed -e 's|$$(srcdir)/[.][.]|$$(srcdir)/$$(MULTISRCTOP)..|g' \
	      -e 's|$$(srcdir)/\([^/]*[.]c\)|\1|' \
	| awk 'BEGIN   { prev = "" } \
	      /^( )*$$/ { if (prev ~ /\\$$/) \
	                    { prev = substr(prev,1,length(prev)-1); next } } \
	                { print prev; prev = $$0 } \
	      END { if (prev !~ /^( )*$$/) print prev }' \
	>> depend.new
$(srcdir)/depend:  depend.new
	mv depend.new $(srcdir)/depend
# AUTOMATICALLY GENERATED BY 'make depend' - DO NOT EDIT

PlotFile.o: PlotFile.cc \
 $(srcdir)/PlotFile.h \
 $(srcdir)/fstream.h \
 $(srcdir)/iostream.h \
 $(srcdir)/streambuf.h \
 $(srcdir)/libio.h _G_config.h 
SFile.o: SFile.cc \
 $(srcdir)/SFile.h \
 $(srcdir)/fstream.h \
 $(srcdir)/iostream.h \
 $(srcdir)/streambuf.h \
 $(srcdir)/libio.h _G_config.h 
builtinbuf.o: builtinbuf.cc \
 $(srcdir)/builtinbuf.h \
 $(srcdir)/streambuf.h \
 $(srcdir)/libio.h _G_config.h \
 $(srcdir)/iostreamP.h \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h
editbuf.o: editbuf.cc \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h \
 $(srcdir)/editbuf.h \
 $(srcdir)/fstream.h \
 $(srcdir)/iostream.h \
 $(srcdir)/streambuf.h 
filebuf.o: filebuf.cc \
 $(srcdir)/iostreamP.h \
 $(srcdir)/streambuf.h \
 $(srcdir)/libio.h _G_config.h \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/builtinbuf.h
fstream.o: fstream.cc \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h \
 $(srcdir)/fstream.h \
 $(srcdir)/iostream.h \
 $(srcdir)/streambuf.h
indstream.o: indstream.cc \
 $(srcdir)/indstream.h \
 $(srcdir)/iostream.h \
 $(srcdir)/streambuf.h \
 $(srcdir)/libio.h _G_config.h 
ioassign.o: ioassign.cc \
 $(srcdir)/iostream.h \
 $(srcdir)/streambuf.h \
 $(srcdir)/libio.h _G_config.h \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h
ioextend.o: ioextend.cc \
 $(srcdir)/iostream.h \
 $(srcdir)/streambuf.h \
 $(srcdir)/libio.h _G_config.h 
iomanip.o: iomanip.cc \
 $(srcdir)/iomanip.h \
 $(srcdir)/iostream.h \
 $(srcdir)/streambuf.h \
 $(srcdir)/libio.h _G_config.h 
iostream.o: iostream.cc \
 $(srcdir)/iostream.h \
 $(srcdir)/streambuf.h \
 $(srcdir)/libio.h _G_config.h \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/floatio.h
isgetline.o: isgetline.cc \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h \
 $(srcdir)/iostream.h \
 $(srcdir)/streambuf.h 
isgetsb.o: isgetsb.cc \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h \
 $(srcdir)/iostream.h \
 $(srcdir)/streambuf.h 
isscan.o: isscan.cc \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h \
 $(srcdir)/iostream.h \
 $(srcdir)/streambuf.h
osform.o: osform.cc \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h \
 $(srcdir)/iostream.h \
 $(srcdir)/streambuf.h
parsestream.o: parsestream.cc \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h \
 $(srcdir)/parsestream.h \
 $(srcdir)/streambuf.h 
pfstream.o: pfstream.cc \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h \
 $(srcdir)/pfstream.h \
 $(srcdir)/fstream.h \
 $(srcdir)/iostream.h \
 $(srcdir)/streambuf.h \
 $(srcdir)/procbuf.h
procbuf.o: procbuf.cc \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h \
 $(srcdir)/procbuf.h \
 $(srcdir)/streambuf.h
sbform.o: sbform.cc \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h \
 $(srcdir)/streambuf.h
sbgetline.o: sbgetline.cc \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h \
 $(srcdir)/streambuf.h
sbscan.o: sbscan.cc \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h \
 $(srcdir)/streambuf.h
stdiostream.o: stdiostream.cc \
 $(srcdir)/stdiostream.h \
 $(srcdir)/iostream.h \
 $(srcdir)/streambuf.h \
 $(srcdir)/libio.h _G_config.h \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h
stdstrbufs.o: stdstrbufs.cc \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h 
stdstreams.o: stdstreams.cc \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h \
 $(srcdir)/streambuf.h \
 $(srcdir)/iostream.h
stream.o: stream.cc \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h \
 $(srcdir)/stream.h \
 $(srcdir)/iostream.h \
 $(srcdir)/streambuf.h \
 $(srcdir)/strstream.h \
 $(srcdir)/strfile.h
streambuf.o: streambuf.cc \
 $(srcdir)/iostreamP.h \
 $(srcdir)/streambuf.h \
 $(srcdir)/libio.h _G_config.h \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h 
strstream.o: strstream.cc \
 $(srcdir)/iostreamP.h \
 $(srcdir)/streambuf.h \
 $(srcdir)/libio.h _G_config.h \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/strstream.h \
 $(srcdir)/iostream.h \
 $(srcdir)/strfile.h 
cleanup.o: cleanup.c \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h 
filedoalloc.o: filedoalloc.c \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h 
fileops.o: fileops.c \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h 
floatconv.o: floatconv.c \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h 
genops.o: genops.c \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h 
iofclose.o: iofclose.c \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h 
iofdopen.o: iofdopen.c \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h 
iofflush.o: iofflush.c \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h 
iofgetpos.o: iofgetpos.c \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h 
iofgets.o: iofgets.c \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h 
iofopen.o: iofopen.c \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h 
iofprintf.o: iofprintf.c \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h 
iofputs.o: iofputs.c \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h 
iofread.o: iofread.c \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h 
iofscanf.o: iofscanf.c \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h 
iofsetpos.o: iofsetpos.c \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h 
ioftell.o: ioftell.c \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h 
iofwrite.o: iofwrite.c \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h 
iogetdelim.o: iogetdelim.c \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h 
iogetline.o: iogetline.c \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h 
iogets.o: iogets.c \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h 
ioignore.o: ioignore.c \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h 
iopadn.o: iopadn.c \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h 
ioperror.o: ioperror.c \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h 
iopopen.o: iopopen.c \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h 
ioprims.o: ioprims.c \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h 
ioprintf.o: ioprintf.c \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h 
ioputs.o: ioputs.c \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h 
ioscanf.o: ioscanf.c \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h 
ioseekoff.o: ioseekoff.c \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h 
ioseekpos.o: ioseekpos.c \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h 
iosetbuffer.o: iosetbuffer.c \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h 
iosetvbuf.o: iosetvbuf.c \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h 
iosprintf.o: iosprintf.c \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h 
iosscanf.o: iosscanf.c \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h 
iostrerror.o: iostrerror.c \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h 
ioungetc.o: ioungetc.c \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h 
iovfprintf.o: iovfprintf.c \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h \
 $(srcdir)/floatio.h
iovfscanf.o: iovfscanf.c \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h \
 $(srcdir)/floatio.h
iovsprintf.o: iovsprintf.c \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h \
 $(srcdir)/strfile.h
iovsscanf.o: iovsscanf.c \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h \
 $(srcdir)/strfile.h
outfloat.o: outfloat.c \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h 
stdfiles.o: stdfiles.c \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h \
 $(srcdir)/libio.h _G_config.h 
strops.o: strops.c \
 $(srcdir)/strfile.h \
 $(srcdir)/libio.h _G_config.h \
 $(srcdir)/libioP.h \
 $(srcdir)/iolibio.h 
# End of package fragment generated by ./config.shared.
# Warning: this fragment is automatically generated
##

libio.a: $(_G_CONFIG_H) $(LIBIO_OBJECTS)
	-rm -rf libio.a
	$(AR) $(AR_FLAGS) libio.a $(LIBIO_OBJECTS)
	$(RANLIB) libio.a

libiostream.a: $(_G_CONFIG_H) $(LIBIOSTREAM_DEP)
	-rm -rf libiostream.a
	$(AR) $(AR_FLAGS) libiostream.a $(LIBIOSTREAM_USE)
	$(RANLIB) libiostream.a

test: test.o libio.a
	$(CC) -o test test.o libio.a
tpipe: tpipe.o libio.a
	$(CC) -o tpipe tpipe.o libio.a

iostream.list: stamp-picdir $(_G_CONFIG_H) $(LIBIOSTREAM_DEP)
	@echo "$(LIBIOSTREAM_USE)"> iostream.list

stdio/stdio.list: force
	@rootme=`pwd`/ ; export rootme; cd stdio ; \
	  $(MAKE) $(FLAGS_TO_PASS) stdio.list

stdio.list: stdio/stdio.list
	rm -f tstdio.list
	sed 's,\([a-z_]*\.o\),stdio/\1,g' stdio/stdio.list > tstdio.list
	mv tstdio.list stdio.list

_G_config.h: ${srcdir}/gen-params
	rootme=`pwd`/ ; export rootme; \
	CC="$(CC)"; export CC; \
	CXX="$(CXX) $(NOSTDINC) $(CXXFLAGS)"; export CXX; \
	CONFIG_NM="$(NM)"; export CONFIG_NM; \
	$(SHELL) ${srcdir}/gen-params LIB_VERSION=$(VERSION) $(G_CONFIG_ARGS) >tmp-params.h
	mv tmp-params.h _G_config.h

install:
	rootme=`pwd`/ ; export rootme ; \
	if [ -z "$(MULTISUBDIR)" ]; then \
	  if [ "$(_G_CONFIG_H)" != "" ]; then \
	    rm -f $(tooldir)/include/_G_config.h ; \
	    $(INSTALL_DATA) _G_config.h $(tooldir)/include/_G_config.h || exit 1; \
	  else true; \
	  fi ; \
	  cd $(srcdir); \
	  for FILE in $(USER_INCLUDES); do if [ $$FILE != _G_config.h ]; then \
	    rm -f $(gxx_includedir)/$$FILE ; \
	    $(INSTALL_DATA) $$FILE $(gxx_includedir)/$$FILE ; \
	    chmod a-x $(gxx_includedir)/$$FILE ; \
	  else true; fi; done ; \
	else true; \
	fi
	@rootme=`pwd`/ ; export rootme ; \
	$(MULTIDO) $(FLAGS_TO_PASS) multi-do DO=install

c++clean:
	rm -rf $(IOSTREAM_OBJECTS)
	@$(MAKE) $(FLAGS_TO_PASS) "DODIRS=tests" DO=clean subdir_do

# FIXME: There should be an @-sign in front of the `if'.
# Leave out until this is tested a bit more.
multi-do:
	if [ -z "$(MULTIDIRS)" ]; then \
	  true; \
	else \
	  rootpre=`pwd`/; export rootpre; \
	  srcrootpre=`cd $(srcdir); pwd`/; export srcrootpre; \
	  lib=`echo $${rootpre} | sed -e 's,^.*/\([^/][^/]*\)/$$,\1,'`; \
	  compiler="$(CC)"; \
	  for i in `$${compiler} --print-multi-lib 2>/dev/null`; do \
	    dir=`echo $$i | sed -e 's/;.*$$//'`; \
	    if [ "$${dir}" = "." ]; then \
	      true; \
	    else \
	      if [ -d ../$${dir}/$${lib} ]; then \
		flags=`echo $$i | sed -e 's/^[^;]*;//' -e 's/@/ -/g'`; \
		if (cd ../$${dir}/$${lib}; $(MAKE) $(FLAGS_TO_PASS) \
				CFLAGS="$(CFLAGS) $${flags}" \
				CXXFLAGS="$(CXXFLAGS) $${flags}" \
				LIBCFLAGS="$(LIBCFLAGS) $${flags}" \
				LIBCXXFLAGS="$(LIBCXXFLAGS) $${flags}" \
				$(DO)); then \
		  true; \
		else \
		  exit 1; \
		fi; \
	      else true; \
	      fi; \
	    fi; \
	  done; \
	fi

# FIXME: There should be an @-sign in front of the `if'.
# Leave out until this is tested a bit more.
multi-clean:
	if [ -z "$(MULTIDIRS)" ]; then \
	  true; \
	else \
	  lib=`pwd | sed -e 's,^.*/\([^/][^/]*\)$$,\1,'`; \
	  for dir in Makefile $(MULTIDIRS); do \
	    if [ -f ../$${dir}/$${lib}/Makefile ]; then \
	      if (cd ../$${dir}/$${lib}; $(MAKE) $(FLAGS_TO_PASS) $(DO)); \
	      then true; \
	      else exit 1; \
	      fi; \
	    else true; \
	    fi; \
	  done; \
	fi
