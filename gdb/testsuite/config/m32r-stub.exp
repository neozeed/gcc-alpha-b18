#   Copyright (C) 1996, 1997 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

# Please email any bugs, comments, and/or additions to this file to:
# DejaGnu@cygnus.com

# This file was written by Michael Snyder <msnyder@cygnus.com>.

# GDB support routines for a board using Mitsubishi M32R remote debugging
# protocol.

load_lib remote.exp
load_lib gdb.exp


#
# M32R remote run command.
#
# This requires that we beep the user and ask him to push the board reset!
# Then we will switch to the monitor target, run the program, use 2 ^C's
# to interrupt the monitor target, and switch back to the remote target.
# Then we have to do a continue to get past the stub breakpoint.
#

proc gdb_run_cmd {} {
    global gdb_prompt

    set timeout 60
    verbose "Timeout is now $timeout seconds, starting remote stub" 2
    send_user "Please reset the board now...\n"
    sleep 1
    send_user "\n"
    sleep 1
    send_user "\n"
    sleep 1
    send_user "\n"

    # go back to monitor, run the program, interrupt it, and start remote.

    if [target_info exists gdb_protocol] {
	set protocol [target_info gdb_protocol];
    } else {
	set protocol "sparclet"
    }
    if [target_info exists serial] {
	set targetname [target_info serial];
	send_gdb "target $protocol [target_info serial]\n";
    } else {
	if ![target_info exists netport] {
	    perror "Need either netport or gdb_serial entry for [target_info name].";
	    return -1;
	}
	set targetname [target_info netport];
	send_gdb "target $protocol udp [target_info netport]\n";
    }

    gdb_expect {
	 -re "A program is being debug.*Kill it.*y or n. $" {
	    send_gdb "y\n"
	    exp_continue
	}
	 -re "Remote target.*$gdb_prompt $" { }
	 -re ".*SPARCLET appears to be alive.*$gdb_prompt $" {
	    if $verbose>1 then {
		send_user "Set target to $targetname\n"
	    }
	}
	 timeout { 
	    set timeout 10
	    verbose "Timeout is now $timeout seconds" 2
	    perror "Couldn't set M32R target."
	    return -1
	}
    }

    send_gdb "disable\n";
    gdb_expect {
	 -re ".*$gdb_prompt $" {
	    verbose "Breakpoints disabled" 2
	}
	 timeout { 
	    perror "(timeout) disabling breakpoints";
	    return -1 
	}
	 default {
	    perror "error disabling breakpoints";
	}
    }
    send_gdb "run\n";
    gdb_expect {
	 -re "A program is being debug.*Kill it.*y or n. $" {
	    send_gdb "y\n"
	    exp_continue
	}
	 -re "The program being debugged .*y or n. $" {
	    send_gdb "y\n"
	    exp_continue
	}
	 -re ".*Starting program:.*$" { 
	    verbose "Starting remote stub succeeded" 
	}
	 timeout { 
	    perror "(timeout) starting the remote stub" ; 
	    return -1 
	}
	 default {
	    perror "error starting the remote stub";
	}
    }
    sleep 2;
    send_gdb ""
    sleep 1;
    send_gdb ""
    verbose "Sent ^C^C"
    gdb_expect {
	 -re ".*Give up .and stop debugging it.*$" {
	    send_gdb "y\n"
	    exp_continue
	}
	 -re ".*$gdb_prompt $" { 
	    verbose "interrupting remote stub succeeded"
	}
	 timeout { 
	    perror "(timeout) interrupting the remote stub";
	    return -1 
	}
	 default {
	    perror "error interrupting the remote stub";
	}
    }

    if [target_info exists gdb_serial] {
	send_gdb "target remote [target_info gdb_serial]\n"
	gdb_expect {
	     -re ".*Kill it?.*y or n.*" {
		send_gdb "y\n";
		exp_continue
	    }
	     -re ".*$gdb_prompt $"	{
		verbose "connected to stub at [target_info gdb_serial]" 2
	    }
	     timeout { 
		set timeout 10
		verbose "Timeout is now $timeout seconds" 2
		perror "Couldn't set remote target."
		return -1
	    }
	}
    }

    send_gdb "enable\n";
    gdb_expect {
	 -re ".*$gdb_prompt $" {
	    verbose "Breakpoints enabled" 2
	}
	 timeout { 
	    perror "(timeout) enabling breakpoints";
	    return -1 
	}
	 default {
	    perror "error enabling breakpoints";
	}
    }
    send_gdb "continue\n";
    return
}


#
# gdb_load -- load a file into the GDB. 
#             Returns a 0 if there was an error,
#                       1 if it load successfully.
#
proc gdb_load { arg } {
    global verbose
    global loadpath
    global loadfile
    global gdb_prompt
    global GDB
    global expect_out

    set loadfile [file tail $arg]
    set loadpath [file dirname $arg]

    if [target_info exists gdb_protocol] {
	set protocol [target_info gdb_protocol];
    } else {
	set protocol "m32r"
    }

    # get the stub-based loader for faster loading
    send_gdb "file [target_info gdb_loader]\n"
    gdb_expect {
	 -re "A program is being debug.*Kill it.*y or n. $" {
	    send_gdb "y\n"
	    exp_continue
	}
         -re "Load new symbol table.*y or n. $" {
	    send_gdb "y\n"
	    exp_continue
	}
	 -re "Reading symbols from.*done..*$gdb_prompt $" {}
	 -re "$gdb_prompt $" { perror "GDB couldn't find loader" }
	 timeout { 
	    perror "(timeout) read symbol file" ; 
	    return -1
	}
    }

    if [target_info exists serial] {
	set targetname [target_info serial];
	send_gdb "target $protocol [target_info serial]\n";
    } else {
	if ![target_info exists netport] {
	    perror "Need either netport or gdb_serial entry for [target_info name].";
	    return -1;
	}
	set targetname [target_info netport];
	send_gdb "target $protocol udp [target_info netport]\n";
    }
    gdb_expect {
	 -re "Remote target.*$gdb_prompt $" { }
	 -re ".*SPARCLET appears to be alive.*$gdb_prompt $" {
	    if $verbose>1 then {
		send_user "Set target to $targetname\n"
	    }
	}
	 timeout { 
	    set timeout 10
	    verbose "Timeout is now $timeout seconds" 2
	    perror "Couldn't set M32R target."
	    return -1
	}
    }

    send_gdb "run\n";
    gdb_expect {
	 -re "A program is being debug.*Kill it.*y or n. $" {
	    send_gdb "y\n"
	    exp_continue
	}
	 -re "The program being debugged .*y or n. $" {
	    send_gdb "y\n"
	    exp_continue
	}
	 -re ".*Starting program:.*loader.*$" { 
	    verbose "Starting loader succeeded" 
	}
	 timeout { 
	    perror "(timeout) starting the loader" ; 
	    return -1 
	}
	 default {
	    perror "error starting the loader";
	}
    }
    sleep 2;
    send_gdb ""
    sleep 1;
    send_gdb ""
    verbose "Sent ^C^C"
    gdb_expect {
	 -re ".*Give up .and stop debugging it.*$" {
	    send_gdb "y\n"
	    exp_continue
	}
	 -re ".*$gdb_prompt $" { 
	    verbose "Running loader succeeded" 
	}
	 timeout { 
	    perror "(timeout) interrupting the loader" ; 
	    return -1 
	}
	 default {
	    perror "error interrupting the loader";
	}
    }

    # Now ready to actually load the file:

    send_gdb "file $arg\n"
    gdb_expect {
	 -re "A program is being debug.*Kill it.*y or n. $" {
	    send_gdb "y\n"
	    exp_continue
	}
         -re "Load new symbol table.*y or n. $" {
	    send_gdb "y\n"
	    exp_continue
	}
	 -re "Reading symbols from.*done..*$gdb_prompt $" {}
	 -re "$gdb_prompt $" { perror "GDB couldn't read file" }
	 timeout { 
	    perror "(timeout) read symbol file" ; 
	    return -1 
	}
    }

    if [target_info exists gdb_serial] {
	send_gdb "target remote [target_info gdb_serial]\n"
	gdb_expect {
	     -re ".*Kill it?.*y or n.*" {
		send_gdb "y\n";
		exp_continue
	    }
	     -re ".*$gdb_prompt $"	{
		verbose "Set remote target to [target_info serial]" 2
	    }
	     timeout { 
		set timeout 10
		verbose "Timeout is now $timeout seconds" 2
		perror "Couldn't set remote target."
		return -1
	    }
	}
    }
    if [target_info exists gdb_load_offset] {
	set offset "[target_info gdb_load_offset]";
    } else {
	set offset "";
    }
    send_gdb "load $arg $offset\n"
    verbose "Loading $arg into $GDB" 2
    set timeout 1200
    verbose "Timeout is now $timeout seconds" 2
    gdb_expect {
	 -re "Loading.*$gdb_prompt $" {
	    verbose "Loaded $arg into $GDB" 1
	    set timeout 60
	    verbose "Timeout is now $timeout seconds" 2
	}
	 -re "$gdb_prompt $"     {
	    if $verbose>1 then {
		perror "GDB couldn't load."
	    }
	}
	 timeout {
	    if $verbose>1 then {
		perror "Timed out trying to load $arg."
	    }
	}
    }

    send_user "Please reset the board now...\n"
    sleep 1
    send_user "\n"
    sleep 1
    send_user "\n"
    sleep 1
    send_user "\n"

    # go back to monitor, run the program, interrupt it, and start remote.

    if [target_info exists serial] {
	set targetname [target_info serial];
	send_gdb "target $protocol [target_info serial]\n";
    } else {
	if ![target_info exists netport] {
	    perror "Need either netport or gdb_serial entry for [target_info name].";
	    return -1;
	}
	set targetname [target_info netport];
	send_gdb "target $protocol udp [target_info netport]\n";
    }

    gdb_expect {
	 -re "A program is being debug.*Kill it.*y or n. $" {
	    send_gdb "y\n"
	    exp_continue
	}
	 -re "Remote target.*$gdb_prompt $" { }
	 -re ".*SPARCLET appears to be alive.*$gdb_prompt $" {
	    if $verbose>1 then {
		send_user "Set target to $targetname\n"
	    }
	}
	 timeout { 
	    set timeout 10
	    verbose "Timeout is now $timeout seconds" 2
	    perror "Couldn't set M32R target."
	    return -1
	}
    }

    send_gdb "run\n";
    gdb_expect {
	 -re "A program is being debug.*Kill it.*y or n. $" {
	    send_gdb "y\n"
	    exp_continue
	}
	 -re "The program being debugged .*y or n. $" {
	    send_gdb "y\n"
	    exp_continue
	}
	 -re ".*Starting program:.*$" { 
	    verbose "Starting remote stub succeeded" 
	}
	 timeout { 
	    perror "(timeout) starting the remote stub" ; 
	    return -1 
	}
	 default {
	    perror "error starting the remote stub";
	}
    }
    sleep 2;
    send_gdb ""
    sleep 1;
    send_gdb ""
    verbose "Sent ^C^C"
    gdb_expect {
	 -re ".*Give up .and stop debugging it.*$" {
	    send_gdb "y\n"
	    exp_continue
	}
	 -re ".*$gdb_prompt $" { 
	    verbose "interrupting remote stub succeeded"
	}
	 timeout { 
	    perror "(timeout) interrupting the remote stub";
	    return -1 
	}
	 default {
	    perror "error interrupting the remote stub";
	}
    }

    if [target_info exists gdb_serial] {
	send_gdb "target remote [target_info gdb_serial]\n"
	gdb_expect {
	     -re ".*Kill it?.*y or n.*" {
		send_gdb "y\n";
		exp_continue
	    }
	     -re ".*$gdb_prompt $"	{
		verbose "connected to stub at [target_info gdb_serial]" 2
	    }
	     timeout { 
		set timeout 10
		verbose "Timeout is now $timeout seconds" 2
		perror "Couldn't set remote target."
		return -1
	    }
	}
    }
    return 0
}

