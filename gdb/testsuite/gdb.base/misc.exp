# Copyright (C) 1992, 1994, 1995, 1997 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  

# Please email any bugs, comments, and/or additions to this file to:
# bug-gdb@prep.ai.mit.edu

# This file was written by Donn Terry (donn@opennt.com) derived from a
# similar file by Fred Fish. (fnf@cygnus.com)

if $tracelevel {
    strace $tracelevel
}

set prms_id 0
set bug_id 0

set testfile "varargs"
set srcfile ${testfile}.c
set binfile ${objdir}/${subdir}/${testfile}
if  { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable {debug}] != "" } {
    perror "Couldn't compile ${srcfile}"
    return -1
}

# Create and source the file that provides information about the compiler
# used to compile the test case.
if [get_compiler_info ${binfile}] {
    return -1;
}


#
# Test for accessing args and locals when varargs functions used.
#
proc varargs_func { } {
    global gdb_prompt
    global hex
    global decimal
    global gcc_compiled

    # Get near the end of the function.
    if { ! [ runto step ] } then { gdb_suppress_tests; }
    gdb_test "finish" ".*step \\(i=1\\).*" "finish step()"

    # Print locals and args to be sure they're right.

    gdb_test "print xxxxx" "abcde\"" "print xxxxx in function"
    gdb_test "print s" "pqrs\"" "print s in function"
    gdb_test "print f" "3.1415" "print f in function"
    gdb_test "print list" "pqrs\"" "print list in function"
    gdb_test "print a" "\{1, 2, 3, 4\}" "print a in function"
    gdb_test "print i" " = 4" "print i in function"

    gdb_stop_suppressing_tests;
}

#
# Test for setjmp()/longjmp()
#
proc longjmp_func { } {
    global gdb_prompt
    global hex
    global decimal
    global gcc_compiled

    if { ! [ runto main ] } then { gdb_suppress_tests; }

    # single step until we get to dummy
    # break doesn't work inside the -re's (tcl/expect bug?)
    set done 0;
    while (1) {
       send_gdb "step\n";
       gdb_expect {
	  -re ".*dummy.*$gdb_prompt $" { set done 1}
	  -re ".*The program is not being run.*" { set done 1 }
	  -re ".*$gdb_prompt $" { }
	  default { fail "single step to dummy"; set done 1 }

       }
       if { $done } break;
    }

    gdb_test "print v1" " = 99" "setjmp: print v1"
    gdb_test "print v2" " = 98" "setjmp: print v2"

    gdb_stop_suppressing_tests;
}

gdb_exit
gdb_start
gdb_reinitialize_dir $srcdir/$subdir
gdb_load ${binfile}

varargs_func

set testfile "longjmp"
set srcfile ${testfile}.c
set binfile ${objdir}/${subdir}/${testfile}
if  { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable {debug}] != "" } {
    perror "Couldn't compile ${srcfile}"
    return -1
}

gdb_exit
gdb_start
gdb_reinitialize_dir $srcdir/$subdir
gdb_load ${binfile}

longjmp_func
